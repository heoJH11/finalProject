<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.member.join.mapper.MemberJoinMapper">
		<!-- 이메일  중복확인 -->
		<select id="emailCk" parameterType="String" resultType="int">
			SELECT COUNT(*) FROM MBER WHERE EMAIL=#{email}
		</select>
		
		<!-- 아이디 중복확인 -->
		<select id="idCk" parameterType="String" resultType="int">
			SELECT COUNT(*) FROM USERS WHERE USER_ID=#{userId}
		</select>
		
		<!-- 닉네임 중복확인 -->
		<select id="ncnmCk" parameterType="String" resultType="int">
			SELECT COUNT(*) FROM USERS WHERE USER_NCNM=#{userNcnm}
		</select>
		
		<!-- 아이디 찾기 -->
		<select id="idSearch" resultType="usersVO" parameterType="vMberUsersVO">
			SELECT USER_ID AS userId, EMPLYR_TY AS emplyrTy
			FROM V_MBER_USERS
			WHERE USER_NM=#{userNm}
			AND EMAIL=#{email}
		</select>
		<select id="idSearch2" resultType="vProUsersVO" parameterType="vMberUsersVO">
			SELECT USER_ID AS userId, EMPLYR_TY AS emplyrTy
			FROM V_PRO_USERS
			WHERE USER_NM=#{userNm}
			AND EMAIL=#{email}
		</select>
		
		<!-- 비밀번호 찾기 -->
		<select id="pwSearch" resultType="usersVO" parameterType="vMberUsersVO">
			SELECT USER_PASSWORD AS userPassword, EMPLYR_TY AS emplyrTy
			FROM V_MBER_USERS
			WHERE MBER_ID=#{mberId}
			AND EMAIL=#{email}
			AND MBER_MBTLNUM=#{mberMbtlnum}
		</select>
		<select id="pwSearch2" resultType="String" parameterType="vMberUsersVO">
			SELECT EMPLYR_TY AS emplyrTy
			FROM V_PRO_USERS
			WHERE PRO_ID=#{mberId}
			AND EMAIL=#{email}
		</select>
		
		<!-- 임시비밀번호 적용-->
		<update id="updatePw" parameterType="hashMap">
			UPDATE USERS
			SET USER_PASSWORD=#{imsiPw},
			CHANGE_PW_CK = 1
			WHERE USER_ID=#{mberId}
		</update>
		
		<!-- 회원 로그인 -->
		<resultMap type="usersVO" id="usersMap">
			<result property="cnt" column="cnt"/>
			<result property="emplyrTy" column="emplyrTy"/>
			<result property="userNcnm" column="userNcnm"/>
			<result property="changePwCk" column="CHANGE_PW_CK"/>
		</resultMap>
		<select id="memberLogin" parameterType="hashMap" resultMap="usersMap">
			SELECT USER_ID AS userId, COUNT(*) AS cnt, EMPLYR_TY AS emplyrTy, USER_NCNM AS userNcnm, CHANGE_PW_CK
			FROM USERS
			WHERE USER_ID=#{userId} AND USER_PASSWORD=#{userPassword}
			GROUP BY EMPLYR_TY, USER_NCNM, USER_ID, CHANGE_PW_CK
		</select>
		
		<!-- 세션에 들어갈 정보 출력 -->
		<select id="getProfile" parameterType="hashMap" resultType="vMberUsersVO">
			SELECT MBER_ID, MBER_MBTLNUM, SEXDSTN_TY, EMAIL, MBER_PROFL_PHOTO, USER_NM, USER_PASSWORD, EMPLYR_TY, SECSN_AT, USER_NCNM, USER_ID, CHANGE_PW_CK
			FROM V_MBER_USERS
			WHERE MBER_ID = #{userId}
		</select>
		
		<!-- 주소 출력 -->
		<select id="getAdres" parameterType="hashMap" resultType="adresVO">
			SELECT ADRES, DETAIL_ADRES, ZIP
			FROM ADRES WHERE USER_ID = #{userId}
		</select>
		
		<!-- 회원가입 -->
		<insert id="memberInsert" parameterType="hashMap">
			INSERT ALL
			    INTO USERS(USER_ID, USER_NM, USER_PASSWORD, EMPLYR_TY,USER_NCNM)
			    VALUES(#{userId},#{userNm},#{userPassword},'ET01',#{userNcnm})
			    
			    <if test="mberProflPhoto != null">
			    INTO MBER(MBER_ID, MBER_MBTLNUM, SEXDSTN_TY, EMAIL, MBER_PROFL_PHOTO)
			    VALUES(#{userId},#{mberMbtlnum},#{sexdstnTy},#{email},#{mberProflPhoto})
			    </if>
			    <if test="mberProflPhoto == null">
			    INTO MBER(MBER_ID, MBER_MBTLNUM, SEXDSTN_TY, EMAIL)
			    VALUES(#{userId},#{mberMbtlnum},#{sexdstnTy},#{email})
			    </if>
			    
			    INTO AUTHOR(AUTHOR, USER_ID)
			    VALUES('ET01',#{userId})
			    
			    INTO ADRES(USER_ID, ADRES_NO, ADRES, DETAIL_ADRES, ZIP)
			    VALUES(#{userId},ADRES_SEQ.NEXTVAL,#{adres},#{detailAdres},#{zip})
			SELECT * FROM DUAL
		</insert>
</mapper>